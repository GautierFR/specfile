diff --git a/mcs/class/System/System.Net.Sockets/Socket.cs b/mcs/class/System/System.Net.Sockets/Socket.cs
index 39b0013..27a9f1d 100644
--- a/mcs/class/System/System.Net.Sockets/Socket.cs
+++ b/mcs/class/System/System.Net.Sockets/Socket.cs
@@ -40,7 +40,6 @@ using System.Collections.Generic;
 using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using System.Threading;
-using System.Threading.Tasks;
 using System.Reflection;
 using System.IO;
 using System.Net.Configuration;
@@ -973,32 +972,7 @@ namespace System.Net.Sockets
 			if (is_listening)
 				throw new InvalidOperationException ();
 
-			var callback = new AsyncCallback ((result) => {
-				var resultTask = ((Task<IPAddress[]>)result);
-				BeginConnect (resultTask.Result, port, requestCallback, resultTask.AsyncState);
-			});
-			return ConvertToApm<IPAddress[]> (Dns.GetHostAddressesAsync (host), callback, state);
-		}
-
-		private static IAsyncResult ConvertToApm<T> (Task<T> task, AsyncCallback callback, object state)
-		{
-			if (task == null)
-				throw new ArgumentNullException ("task");
-
-			var tcs = new TaskCompletionSource<T> (state);
-			task.ContinueWith (t =>
-			{
-				if (t.IsFaulted)
-					tcs.TrySetException (t.Exception.InnerExceptions);
-				else if (t.IsCanceled)
-					tcs.TrySetCanceled ();
-				else
-					tcs.TrySetResult (t.Result);
-
-				if (callback != null)
-					callback (tcs.Task);
-			}, TaskScheduler.Default);
-			return tcs.Task;
+			return BeginConnect (Dns.GetHostAddresses (host), port, requestCallback, state);
 		}
 
 		public IAsyncResult BeginConnect (EndPoint remoteEP, AsyncCallback callback, object state)
